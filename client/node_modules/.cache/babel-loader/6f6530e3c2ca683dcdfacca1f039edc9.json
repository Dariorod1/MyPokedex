{"ast":null,"code":"import { ADDPOKEMON } from \"../actions/index\";\nimport { GETCREATE } from \"../actions/index\";\nimport { GETDETAILS } from \"../actions/index\";\nimport { GETNAME } from \"../actions/index\";\nimport { GETPOKEMONS } from \"../actions/index\";\nimport { GETTYPES, GETAPI } from \"../actions/index\";\nimport { POKEMONS_ORDER, POKEMONS_ORIGIN, POKEMON_TYPES } from '../actions/index';\nexport const GetPokemonOrder = (order, array) => {\n  switch (order) {\n    case 'A-Z':\n      return array.sort((a, b) => {\n        if (a.name > b.name) {\n          return 1;\n        } else {\n          return -1;\n        }\n      });\n\n    case 'Z-A':\n      return array.sort((a, b) => {\n        if (a.name < b.name) {\n          return 1;\n        } else {\n          return -1;\n        }\n      });\n\n    case 'More Attack':\n      return array.sort((a, b) => {\n        if (a.attack < b.attack) {\n          return 1;\n        } else {\n          return -1;\n        }\n      });\n\n    case 'Less Attack':\n      return array.sort((a, b) => {\n        if (a.attack > b.attack) {\n          return 1;\n        } else {\n          return -1;\n        }\n      });\n\n    default:\n      return array;\n  }\n};\n_c = GetPokemonOrder;\nexport const GetPokemonType = (type, array) => {\n  if (type === 'All') return array;\n  let newArray = array.filter((el, i) => el.Types.length ? el.Types[0].name === type ? true : el.Types.length > 1 ? el.Types[1].name === type ? true : false : false : false);\n  return newArray;\n};\n_c2 = GetPokemonType;\nexport const GetPokemonsViews = (array, min, max) => {\n  if (!min && !max) {\n    return array.slice(0, 40);\n  }\n\n  return array.slice(min, max);\n};\n_c3 = GetPokemonsViews;\nconst initialState = {\n  pokemonDetails: [],\n  pokemons: [],\n  pokemonName: [],\n  loading: false,\n  pokemonHome: [],\n  types: [],\n  pokemonCreate: [],\n  pokemonFilter: [],\n  pokemonFilter: 'All',\n  pokemonOrigin: 'All'\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GETPOKEMONS:\n      return { ...state,\n        pokemons: action.payload,\n        pokemonHome: action.payload,\n        pokemonViews: {\n          all: action.payload,\n          now: GetPokemonsViews(action.payload)\n        }\n      };\n\n    case GETDETAILS:\n      return { ...state,\n        pokemonDetails: action.payload,\n        loading: false\n      };\n\n    case GETTYPES:\n      return { ...state,\n        types: action.payload\n      };\n\n    case GETNAME:\n      return { ...state,\n        pokemonHome: action.payload,\n        loading: true\n      };\n\n    case GETCREATE:\n      return { ...state,\n        pokemonHome: action.payload\n      };\n\n    case GETAPI:\n      return { ...state,\n        pokemonHome: action.payload\n      };\n\n    case ADDPOKEMON:\n      return { ...state\n      };\n\n    case POKEMONS_ORDER:\n      return { ...state,\n        pokemonHome: GetPokemonsViews(GetPokemonOrder(action.payload, state.pokemonHome)),\n        pokemonFilter: action.payload\n      };\n\n    case POKEMON_TYPES:\n      state.pokemonHome = GetPokemonType(action.payload, state.pokemonHome);\n      return { ...state,\n        pokemonHome: GetPokemonsViews(state.pokemonHome),\n        pokemonFilter: action.payload\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\n\nexport default rootReducer;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"GetPokemonOrder\");\n$RefreshReg$(_c2, \"GetPokemonType\");\n$RefreshReg$(_c3, \"GetPokemonsViews\");","map":{"version":3,"sources":["C:/Users/dario/Desktop/PI-Pokemon-FT12-master/PI-Pokemon-FT12-master/client/src/reducer/index.js"],"names":["ADDPOKEMON","GETCREATE","GETDETAILS","GETNAME","GETPOKEMONS","GETTYPES","GETAPI","POKEMONS_ORDER","POKEMONS_ORIGIN","POKEMON_TYPES","GetPokemonOrder","order","array","sort","a","b","name","attack","GetPokemonType","type","newArray","filter","el","i","Types","length","GetPokemonsViews","min","max","slice","initialState","pokemonDetails","pokemons","pokemonName","loading","pokemonHome","types","pokemonCreate","pokemonFilter","pokemonOrigin","rootReducer","state","action","payload","pokemonViews","all","now"],"mappings":"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","sourcesContent":["import { ADDPOKEMON } from \"../actions/index\";\r\nimport { GETCREATE } from \"../actions/index\";\r\nimport { GETDETAILS } from \"../actions/index\";\r\nimport { GETNAME } from \"../actions/index\";\r\nimport { GETPOKEMONS } from \"../actions/index\";\r\nimport { GETTYPES, GETAPI } from \"../actions/index\";\r\nimport { POKEMONS_ORDER, POKEMONS_ORIGIN, POKEMON_TYPES } from '../actions/index'\r\nexport const GetPokemonOrder = (order, array) => {\r\n\r\n    switch (order) {\r\n        case 'A-Z':\r\n            return array.sort((a, b) => {\r\n                if (a.name > b.name) {\r\n                    return 1;\r\n                } else {\r\n                    return -1;\r\n                }\r\n            });\r\n        case 'Z-A':\r\n            return array.sort((a, b) => {\r\n                if (a.name < b.name) {\r\n                    return 1;\r\n                } else {\r\n                    return -1;\r\n                }\r\n            });\r\n        case 'More Attack':\r\n            return array.sort((a, b) => {\r\n                if (a.attack < b.attack) {\r\n                    return 1;\r\n                } else {\r\n                    return -1;\r\n                }\r\n            });\r\n        case 'Less Attack':\r\n            return array.sort((a, b) => {\r\n                if (a.attack > b.attack) {\r\n                    return 1;\r\n                } else {\r\n                    return -1;\r\n                }\r\n            });\r\n\r\n        default:\r\n            return array;\r\n    }\r\n};\r\n\r\nexport const GetPokemonType = (type, array) => {\r\n    if (type === 'All') return array;\r\n    let newArray = array.filter((el, i) =>\r\n        el.Types.length ?\r\n        el.Types[0].name === type ?\r\n        true :\r\n        el.Types.length > 1 ?\r\n        el.Types[1].name === type ?\r\n        true :\r\n        false :\r\n        false :\r\n        false\r\n    );\r\n    return newArray;\r\n};\r\n\r\nexport const GetPokemonsViews = (array, min, max) => {\r\n    if (!min && !max) {\r\n        return array.slice(0, 40);\r\n    }\r\n    return array.slice(min, max);\r\n};\r\n\r\nconst initialState = {\r\n    pokemonDetails: [],\r\n    pokemons: [],\r\n    pokemonName: [],\r\n    loading: false,\r\n    pokemonHome: [],\r\n    types: [],\r\n    pokemonCreate: [],\r\n    pokemonFilter: [],\r\n    pokemonFilter: 'All',\r\n    pokemonOrigin: 'All',\r\n};\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GETPOKEMONS:\r\n            return {\r\n                ...state,\r\n                pokemons: action.payload,\r\n                pokemonHome: action.payload,\r\n                pokemonViews: {\r\n                    all: action.payload,\r\n                    now: GetPokemonsViews(action.payload),\r\n                }\r\n            };\r\n\r\n        case GETDETAILS:\r\n            return {\r\n                ...state,\r\n                pokemonDetails: action.payload,\r\n\r\n                loading: false,\r\n            };\r\n\r\n        case GETTYPES:\r\n            return {\r\n                ...state,\r\n                types: action.payload,\r\n            };\r\n\r\n        case GETNAME:\r\n            return {\r\n                ...state,\r\n                pokemonHome: action.payload,\r\n                loading: true,\r\n            };\r\n        case GETCREATE:\r\n            return {\r\n                ...state,\r\n                pokemonHome: action.payload,\r\n            };\r\n        case GETAPI:\r\n            return {\r\n                ...state,\r\n                pokemonHome: action.payload\r\n            }\r\n        case ADDPOKEMON:\r\n            return {\r\n                ...state,\r\n            };\r\n        case POKEMONS_ORDER:\r\n            return {\r\n                ...state,\r\n                pokemonHome: GetPokemonsViews(GetPokemonOrder(action.payload, state.pokemonHome)),\r\n                pokemonFilter: action.payload\r\n\r\n            };\r\n\r\n        case POKEMON_TYPES:\r\n            state.pokemonHome = GetPokemonType(\r\n                action.payload,\r\n                state.pokemonHome\r\n            );\r\n            return {\r\n                ...state,\r\n                pokemonHome: GetPokemonsViews(state.pokemonHome),\r\n                pokemonFilter: action.payload,\r\n            };\r\n\r\n\r\n        default:\r\n            return {...state };\r\n    }\r\n};\r\n\r\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}